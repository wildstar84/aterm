I created this README to explain how to set up a "dtterm-like" menubar in 
aterm, after finding essentially nothing on Google, or in the other data here!  
When I finally figured out through much t&e how to load the example menu files 
included, none of them seemed to work and it was difficult making heads or 
tails of what they contained.  I ended up sifting through and groking the code 
in menubar.c and the features.h file and determined that I had to add a line 
to the latter allowing menus to even be processed:  "#define MENUBAR 1", just 
above the line "#define MENUBAR_MAX 8".  I also had to define an environment 
variable in my .bashrc file specifying a directory for aterm to search for 
menu files in:  "export ATERMPATH=/home/me/.config/aterm", create that 
directory, and place my .menu file there.  It's very close to the one I added 
to the example ones (with lots of explanitory comments) called "mymenu.menu".

The menu files specify the menubar(s), each containing menu-buttons, each 
containing menu-items (with names and escape-sequences or commands).  The 
layout will appear as:  [[menu-button1][menu-btn2][...] <^v>] in the top row 
of your terminal         [menu-item1]  (drops down when menu-button1 pressed).
                         [menu-item2]...

The four goofey looking arrow icons on the right edge default to pressing 
the left, right, down, and up arrow keys respecively, and can also be 
configured in the .menu file - the example.menu file shows an example for this 
on line 78 rebinding them for Emacs control-sequences (I haven't tried it).

It took a lot of groking to determine how to define and differentiate between 
the menu-bar(s), menu-buttons, and menu-items in the menu-file.  Please start 
with and reading through my working example file:  mymenu.menu and the 
comments before attempting to try the others (which seem to be geared toward 
specific ancient applications, which most of us don't even have anymore).

Also, be aware that these are not mouse-button driven popup menus like those 
that come with xterm and friends but are for creating custom user menus, 
on a menubar like those used by the old Solaris/CDE "dtterm" terminal (the 
last terminal app. that I fondly used and loved back in the day)!  Even though 
aterm supports multiple menubars (up to 8 by default - if menubars are enabled 
in features.h BEFORE compiling), I would generally recommend sticking with at 
most 1 menubar and simply putting all my menus, ie [File], [Edit], [Help], 
etc. there.  Each menu-item can have additional submenus configured if needed.  
See the example menu file "terminal.menu" that defines an example submenu with 
four additional menu-items called "../Keys/*".  Submenus are defined using the 
"reverse directory-tree" syntax of "../submenuname/*" and are terminated by 
the line "../".

Menu actions are a string of either a shell command followed by "\r" (not "\n") 
valid ANSI-Terminal escape sequences (usually starting with "^@\E"), or 
special codes I defined to support the control sequences I added for the 
standard "Copy", "Paste Primary", and "Paste Clipboard" keyboard commands:
^^C (Control+C) (actually Shift+Control+c), as the C is capitalized and 
contrasted with ^C (Control+c), which sends a cancel/break/abort to the 
terminal), ^@v (Alt+v), and ^^v (Control+v) respectively (Note: Only these 
meta-letter combinations are currently supported.  I also added support for hex 
characters, specified as "0x##" for specifying character#s 128-255.  
You will see all these in my mymenu.menu example file.

Note:  I have added one extension to the menu configuration "language" 
used in the .menu files:  (an optional ">" sign prepended to the name of 
a top-level menu name - formatted otherwise as "/Menu Name/*") that 
will cause that menu's menubutton to be packed right-justified on the menu-
bar instead of the default left.  Also note that menubuttons are packed in 
order that they are encountered in the file starting at the edges and going 
inward toward the center.  Therefore, if packing more than one right-justified 
menubutton, they need to appear in the file starting with the "last" (right-
most) one first, though they may be randomly dispersed among any left-justified 
ones in the file.  For example, if file contained "/Left menu1/*, "/Left2/*", 
">/Right1/*", "/Left3/*", ">/Right2/*", the menubar would appear as:
[[Left menu1][Left2][Left3]     bar title     [Right2][Right1][arrows]]

=============== Original aterm README.menus (below here): ==============

A few examples of constructing menubars for rxvt.  Used in conjuction
with the reference material (rxvtRef.html/txt), it should be possible to
piece together some useful menus without too much time.

C-shell users be warned.
Some of the menu items contain bsh/ksh constructs like ${EDITOR:-vi}\r
which will cause your shell to gag.
----------------------------------------------------------------------

example.menu:
	simple menus for Pico and the Shell

jedmenu.sl:
	(almost) self-contained SLang code for loading up a menubar
	for the Jed editor.  It doesn't need terminal.menu,
	but looks a bit better with it.

	Note for JED users:
	    since rxvt provides an escape sequence to override the
	    normal XTerm interpretation of Shift-Insert/Prev/Next,
	    "wmark.sl" (MS-windows-style shift marking) works really
	    well and is a nice bonus for those forced to switch
	    to/from MS-windows

terminal.menu
	common rxvt terminal functions used by the other menus

menu:
	a small shell script to reduce the pain of typing
	echo "ESC]10; ... BEL" for every menubar command.
	It also contains a sample "default" menu at the bottom.

rxvt.menu:
	A nice script that allows a convenient way to have different
	menubars used for rlogin|telnet to a machine.
	Of course to get it to work, you'll need to add your own
	machine names (and remove mine).

	The script is set up so that "rxvt" will be called if the first
	argument to the script does not contain "rxvt".
	So
		rxvt.menu [options]
	is the same as
		rxvt.menu rxvt [options]

	To always have this script act as the front-end for rxvt:
	  1) install the rxvt binary somewhere not in your path
	  2) set the `exe' in menu.script to point to this binary
	     eg,
		exe="/usr/local/X11/rxvt-2.21/rxvt"
		# default program to execute
	  3) have rxvt.menu linked somewhere in your path as `rxvt'
	  4) add all the various machines/menus combinations to
	     rxvt.menu, or else make a separate database and change
	     the `menu' variable in rxvt.menu to suit.

